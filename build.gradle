plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.39-beta'
//    id 'net.neoforged.moddevgradle.tasks.JarJar' version '0.4.2' // Added JarJar plugin
}
//sourceSets.main.java {
//    exclude 'com/awesomeshot5051/resourceFarm/data/*.java'
//    exclude 'com/awesomeshot5051/resourceFarm/recipe/ModDataComponents.java'
////    exclude '**/pattern/to/exclude/*'
//}
version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://mvnrepository.com/artifact/net.neoforged/JarJarSelector"
    }
    maven {
        url "https://maven.k-4u.nl"
    }
    maven {
        url "file://${project.projectDir}/repo"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    implementation "mcjty.theoneprobe:theoneprobe:${top_version}"
    implementation "curse.maven:jade-324717:${jade_id}"
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    // JarJar dependency
    jarJar(implementation("de.maxhenkel.corelib:corelib:${minecraft_version}-${corelib_version}")) {
//        version {
//            // The version range your mod is actually compatible with.
//            // Note that you may receive a *lower* version than your preferred if another
//            // Mod is only compatible up to 1.7.24, for example, your mod might get 1.7.24 at runtime.
//            strictly "[${corelib_version}]"
//            prefer "${corelib_version}" // The version actually used in your dev workspace
//        }
//    implementation "de.maxhenkel.corelib:corelib:${minecraft_version}-${corelib_version}"
        compileOnly "de.maxhenkel.corelib:corelib:${minecraft_version}-${corelib_version}:javadoc"
//    implementation 'net.neoforged:JarJarSelector:0.4.2'
    }
}

//processResources {
//    filesMatching('**/*.toml') {
//        expand 'mod_version': mod_version,
//                'neoforge_dependency': neoforge_dependency,
//                'minecraft_version': minecraft_version
//    }
//}


tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/resources/META-INF"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}